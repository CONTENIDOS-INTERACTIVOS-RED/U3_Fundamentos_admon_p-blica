{"remainingRequest":"/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/src/views/curso/Tema2.vue?vue&type=template&id=b769ce3c&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/src/views/curso/Tema2.vue","mtime":1741576442773},{"path":"/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_admon_p-blica/U3_Fundamentos_admon_p-blica/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}